import{_ as l}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as c,c as r,a as e,b as n,d as s,e as t}from"./app-2a2308c1.js";const p={},d=e("h2",{id:"serverurl",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#serverurl","aria-hidden":"true"},"#"),n(" serverURL")],-1),u=e("ul",null,[e("li",null,[n("Type: "),e("code",null,"string")]),e("li",null,"Required: Yes")],-1),m=e("p",null,"Waline server address url",-1),h=e("h2",{id:"emoji",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#emoji","aria-hidden":"true"},"#"),n(" emoji")],-1),k=t(`<li><p>Type: <code>(string | WalineEmojiInfo)[] | false</code></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">WalineEmojiPresets</span> <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">http://</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token builtin">string</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span> <span class="token operator">|</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">https://</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token builtin">string</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>

<span class="token keyword">interface</span> <span class="token class-name">WalineEmojiInfo</span> <span class="token punctuation">{</span>
  <span class="token doc-comment comment">/**
   * Emoji name show on tab
   */</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  <span class="token doc-comment comment">/**
   * Current folder link
   */</span>
  folder<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  <span class="token doc-comment comment">/**
   * Common prefix of Emoji icons
   */</span>
  prefix<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  <span class="token doc-comment comment">/**
   * Type of Emoji icons, will be regarded as file extension
   */</span>
  type<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  <span class="token doc-comment comment">/**
   * Emoji icon show on tab
   */</span>
  icon<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  <span class="token doc-comment comment">/**
   * Emoji image list
   */</span>
  items<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>Default: <code>[&#39;//unpkg.com/@waline/emojis@1.1.0/weibo&#39;]</code></p></li>`,2),g=e("p",null,"Details:",-1),v={href:"https://waline.js.org/en/guide/features/emoji.html",target:"_blank",rel:"noopener noreferrer"},b=t('<p>Emoji settings.</p><h2 id="dark" tabindex="-1"><a class="header-anchor" href="#dark" aria-hidden="true">#</a> dark</h2><ul><li>Type: <code>string | boolean</code></li><li>Default: <code>false</code></li></ul><p>Darkmode support</p><ul><li>Setting a boolean will set the dark mode according to its value.</li><li>Set it to <code>&#39;auto&#39;</code> will display darkmode due to device settings.</li><li>Filling in a CSS selector will enable darkmode only when the selector match waline ancestor nodes.</li></ul><div class="hint-container tip"><p class="hint-container-title">Examples</p><ul><li><p><strong>Docusaurus</strong>: It will enable darkmode by setting <code>data-theme=&quot;dark&quot;</code> on the <code>&lt;html&gt;</code> tag itself. So you need to set <code>&#39;html[data-theme=&quot;dark&quot;]&#39;</code> as <code>dark</code> option.</p></li><li><p><strong>hexo-theme-fluid</strong>: It will enable darkmode by setting <code>data-user-color-scheme=&quot;dark&quot;</code> on the <code>&lt;html&gt;</code> tag itself. So you need to set <code>&#39;html[data-user-color-scheme=&quot;dark&quot;]&#39;</code> as <code>dark</code> option.</p></li><li><p><strong>vuepress-theme-hope</strong>: It will enable darkmode by setting <code>theme-dark</code> class on the <code>&lt;body&gt;</code> tag itself. So you need to set <code>&#39;body.theme-dark&#39;</code> as <code>dark</code> option.</p></li></ul></div>',6),f={href:"https://waline.js.org/en/guide/features/style.html",target:"_blank",rel:"noopener noreferrer"},_=t('<h2 id="commentsorting" tabindex="-1"><a class="header-anchor" href="#commentsorting" aria-hidden="true">#</a> commentSorting</h2><ul><li>Type: <code>WalineCommentSorting</code></li><li>Default: <code>&#39;latest&#39;</code></li></ul><p>Comment list sorting methods. Optional values: <code>&#39;latest&#39;</code>, <code>&#39;oldest&#39;</code>, <code>&#39;hottest&#39;</code></p><h2 id="meta" tabindex="-1"><a class="header-anchor" href="#meta" aria-hidden="true">#</a> meta</h2><ul><li>Type: <code>string[]</code></li><li>Default: <code>[&#39;nick&#39;,&#39;mail&#39;,&#39;link&#39;]</code></li></ul><p>Reviewer attributes. Optional values: <code>&#39;nick&#39;</code>, <code>&#39;mail&#39;</code>, <code>&#39;link&#39;</code></p><h2 id="requiredmeta" tabindex="-1"><a class="header-anchor" href="#requiredmeta" aria-hidden="true">#</a> requiredMeta</h2><ul><li>Type: <code>string[]</code></li><li>Default: <code>[]</code></li></ul><p>Set required fields, default anonymous, optional values:</p><ul><li><code>[]</code></li><li><code>[&#39;nick&#39;]</code></li><li><code>[&#39;nick&#39;,&#39;mail&#39;]</code></li></ul><h2 id="login" tabindex="-1"><a class="header-anchor" href="#login" aria-hidden="true">#</a> login</h2><ul><li>Type: <code>string</code></li><li>Default value: <code>&#39;enable&#39;</code></li></ul><p>Login mode status, optional values:</p><ul><li><code>&#39;enable&#39;</code>: enable login (default)</li><li><code>&#39;disable&#39;</code>: Login is disabled, users should fill in information to comment</li><li><code>&#39;force&#39;</code>: Forced login, users must login to comment</li></ul><h2 id="wordlimit" tabindex="-1"><a class="header-anchor" href="#wordlimit" aria-hidden="true">#</a> wordLimit</h2><ul><li>Type: <code>number | [number, number]</code></li><li>Default: <code>0</code></li></ul><p>Comment word s limit. When a single number is filled in, it &#39;s the maximum number of comment words. No limit when set to <code>0</code>.</p><h2 id="pagesize" tabindex="-1"><a class="header-anchor" href="#pagesize" aria-hidden="true">#</a> pageSize</h2><ul><li>Type: <code>number</code></li><li>Default: <code>10</code></li></ul><p>number of comments per page.</p>',20),y={id:"imageuploader",tabindex:"-1"},w=e("a",{class:"header-anchor",href:"#imageuploader","aria-hidden":"true"},"#",-1),x=t(`<li><p>Type: <code>WalineImageUploader | false</code></p><div class="language-typescript" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">WalineImageUploader</span> <span class="token operator">=</span> <span class="token punctuation">(</span>image<span class="token operator">:</span> File<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
</code></pre></div></li><li><p>Required: No</p></li>`,2),T=e("p",null,"Details:",-1),C={href:"https://waline.js.org/en/cookbook/customize/upload-image.html",target:"_blank",rel:"noopener noreferrer"},W=e("p",null,[n("Custom image upload method. The default behavior is to embed images Base 64 encoded, you can set this to "),e("code",null,"false"),n(" to disable image uploading.")],-1),j=e("p",null,"The function should receive an image object and return a Promise that provides the image address.",-1),S={id:"highlighter",tabindex:"-1"},D=e("a",{class:"header-anchor",href:"#highlighter","aria-hidden":"true"},"#",-1),R=t(`<li><p>Type: <code>WalineHighlighter | false</code></p><div class="language-typescript" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">WalineHighlighter</span> <span class="token operator">=</span> <span class="token punctuation">(</span>code<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> lang<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
</code></pre></div></li><li><p>Required: No</p></li>`,2),q=e("p",null,"Details:",-1),I={href:"https://waline.js.org/en/cookbook/customize/highlighter.html",target:"_blank",rel:"noopener noreferrer"},E=e("p",null,[e("strong",null,"Code highlighting"),n(", use "),e("code",null,"hanabi"),n(" by default. The function passes in original content of code block and language of the code block. You should return a string directly.")],-1),$=e("p",null,[n("You can pass in a code highlighter of your own, or set to "),e("code",null,"false"),n(" to disable code highlighting.")],-1),z={id:"texrenderer",tabindex:"-1"},O=e("a",{class:"header-anchor",href:"#texrenderer","aria-hidden":"true"},"#",-1),P=t(`<li><p>Type: <code>WalineTexRenderer | false</code></p><div class="language-typescript" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">WalineTexRenderer</span> <span class="token operator">=</span> <span class="token punctuation">(</span>blockMode<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">,</span> tex<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
</code></pre></div></li><li><p>Required: No</p></li>`,2),L=e("p",null,"Details:",-1),N={href:"https://waline.js.org/en/cookbook/customize/tex-renderer.html",target:"_blank",rel:"noopener noreferrer"},V={href:"https://www.mathjax.org/",target:"_blank",rel:"noopener noreferrer"},A={href:"https://katex.org/",target:"_blank",rel:"noopener noreferrer"},H=e("p",null,"Customize $\\TeX$ rendering, the default behavior is to prompt that the preview mode does not support $\\TeX$. The function provides two parameters, the first parameter indicates whether it should be rendered in block level, and the second parameter is the string of the $\\TeX$ content, and return a HTML string as render result.",-1),X=e("p",null,[n("You can import $\\TeX$ renderer to provide preview feature. We recommend you to use Katex or MathJax, or you can set to "),e("code",null,"false"),n(" to disable parsing $\\TeX$.")],-1),B={id:"search",tabindex:"-1"},F=e("a",{class:"header-anchor",href:"#search","aria-hidden":"true"},"#",-1),U=t(`<ul><li><p>Type: <code>WalineSearchOptions | false</code></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">WalineSearchImageData</span> <span class="token keyword">extends</span> <span class="token class-name">Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">unknown</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>
  <span class="token doc-comment comment">/**
   * Image link
   */</span>
  src<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>

  <span class="token doc-comment comment">/**
   * Image title
   *
   * <span class="token keyword">@description</span> Used for alt attribute of image
   */</span>
  title<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>

  <span class="token doc-comment comment">/**
   * Image preview link
   *
   * <span class="token keyword">@description</span> For better loading performance, we will use this thumbnail first in the list
   *
   * <span class="token keyword">@default</span> src
   */</span>
  preview<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> <span class="token class-name">WalineSearchResult</span> <span class="token operator">=</span> WalineSearchImageData<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">interface</span> <span class="token class-name">WalineSearchOptions</span> <span class="token punctuation">{</span>
  <span class="token doc-comment comment">/**
   * Search action
   */</span>
  <span class="token function-variable function">search</span><span class="token operator">:</span> <span class="token punctuation">(</span>word<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>WalineSearchResult<span class="token operator">&gt;</span><span class="token punctuation">;</span>

  <span class="token doc-comment comment">/**
   * Default result when opening list
   *
   * <span class="token keyword">@default</span> () =&gt; search(&#39;&#39;)
   */</span>
  <span class="token keyword">default</span><span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>WalineSearchResult<span class="token operator">&gt;</span><span class="token punctuation">;</span>

  <span class="token doc-comment comment">/**
   * Fetch more action
   *
   * <span class="token keyword">@description</span> It will be triggered when the list scrolls to the bottom. If your search service supports paging, you should set this to achieve infinite scrolling
   *
   * <span class="token keyword">@default</span> (word) =&gt; search(word)
   */</span>
  more<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span>word<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> currentCount<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>WalineSearchResult<span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>Required: No</p></li></ul><p>Customize search features, you can disable search function by setting it to <code>false</code>.</p><h2 id="copyright" tabindex="-1"><a class="header-anchor" href="#copyright" aria-hidden="true">#</a> copyright</h2><ul><li>Type: <code>boolean</code></li><li>Default: <code>true</code></li></ul><p>Whether show copyright and version in footer.</p><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>We hope you can keep it on to support Waline.</p></div><h2 id="recaptchav3key" tabindex="-1"><a class="header-anchor" href="#recaptchav3key" aria-hidden="true">#</a> recaptchaV3Key</h2><ul><li>Type: <code>string</code></li><li>Required: No</li></ul><p>reCAPTCHA V3 is a captcha service provided by Google. You can add reCAPTCHA V3 site key with <code>recaptchaV3Key</code> to enable it. Notice you should also set environment variable <code>RECAPTCHA_V3_SECRET</code> for server.</p><h2 id="reaction" tabindex="-1"><a class="header-anchor" href="#reaction" aria-hidden="true">#</a> reaction</h2><ul><li>Type: <code>boolean | string[]</code></li><li>Default: <code>false</code></li></ul><p>Add emoji interaction function to the article, set it to <code>true</code> to provide the default emoji, you can also customize the emoji image by setting the emoji url array, and supports a maximum of 8 emojis.</p>`,12),M={id:"metaicon",tabindex:"-1"},Y=e("a",{class:"header-anchor",href:"#metaicon","aria-hidden":"true"},"#",-1),K=e("ul",null,[e("li",null,[n("Type: "),e("code",null,"boolean")]),e("li",null,[n("Default: "),e("code",null,"true")])],-1),G=e("p",null,"Whether import meta icon.",-1),J={id:"locales",tabindex:"-1"},Q=e("a",{class:"header-anchor",href:"#locales","aria-hidden":"true"},"#",-1),Z=t(`<li><p>Type: <code>WalineLocales</code></p><div class="language-typescript" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">WalineLocales</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span>localePath<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> WalineLocale<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div></li>`,1),ee={href:"https://waline.js.org/en/cookbook/customize/locale.html",target:"_blank",rel:"noopener noreferrer"},ne=e("p",null,"Waline locales.",-1);function se(ae,te){const a=i("ExternalLinkIcon"),o=i("Badge");return c(),r("div",null,[d,u,m,h,e("ul",null,[k,e("li",null,[g,e("ul",null,[e("li",null,[e("a",v,[n("Guide → Emoji"),s(a)])])])])]),b,e("p",null,[n("For details of custom style and darkmode, please see "),e("a",f,[n("Custom Style"),s(a)]),n(".")]),_,e("h2",y,[w,n(" imageUploader "),s(o,{text:"Client Config Only",type:"warning"})]),e("ul",null,[x,e("li",null,[T,e("ul",null,[e("li",null,[e("a",C,[n("Cookbook → Upload Image"),s(a)])])])])]),W,j,e("h2",S,[D,n(" highlighter "),s(o,{text:"Client Config Only",type:"warning"})]),e("ul",null,[R,e("li",null,[q,e("ul",null,[e("li",null,[e("a",I,[n("Cookbook → Customize Highlighter"),s(a)])])])])]),E,$,e("h2",z,[O,n(" texRenderer "),s(o,{text:"Client Config Only",type:"warning"})]),e("ul",null,[P,e("li",null,[L,e("ul",null,[e("li",null,[e("a",N,[n("Cookbook → Customize $\\TeX$ Renderer"),s(a)])]),e("li",null,[e("a",V,[n("MathJax"),s(a)])]),e("li",null,[e("a",A,[n("KaTeX"),s(a)])])])])]),H,X,e("h2",B,[F,n(" search "),s(o,{text:"Client Config Only",type:"warning"})]),U,e("h2",M,[Y,n(" metaIcon "),s(o,{text:"Plugin Option Only",type:"warning"})]),K,G,e("h2",J,[Q,n(" locales "),s(o,{text:"Plugin Option Only",type:"warning"})]),e("ul",null,[Z,e("li",null,[e("p",null,[n("Details: "),e("a",ee,[n("Waline Locales"),s(a)])])])]),ne])}const le=l(p,[["render",se],["__file","waline.html.vue"]]);export{le as default};
